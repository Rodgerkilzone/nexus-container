services:
  # mongo:
  #   image: mongo:latest
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
  #   volumes:
  #     - mongo_data:/data/db
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

  # node:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   restart: always
  #   command: nodemon --legacy-watch index.js
  #   environment:
  #     MONGO_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/myapp?authSource=admin
  #     NODE_ENV: development
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #   depends_on:
  #     - mongo
  #   networks:
  #     - wg-network
  #   expose:
  #     - 5000
  #     - 1812
  #     - 1813
  #   ports:
  #     - "5000:5000"
  

        
  wireguard:
      image: linuxserver/wireguard:latest
      restart: always
      environment:
        - PUID=1000
        - PGID=1000
        - TZ=Etc/UTC
      volumes:
        - ./wireguard/wg_confs:/config/wg_confs
      networks:
        - wg-network
      ports:
        - "51820:51820/udp"
      cap_add:
        - NET_ADMIN
        - SYS_MODULE
      sysctls:
        - net.ipv4.ip_forward=1
      healthcheck:
        test: ["CMD", "wg", "show"]
        interval: 30s
        timeout: 10s
        retries: 3
  
  # react:
  #     build:
  #       context: ./frontend
  #       dockerfile: Dockerfile.dev
  #     volumes:
  #       - ./frontend:/app
  #       - /app/node_modules
  #     environment:
  #       CHOKIDAR_USEPOLLING: true
  #       NODE_ENV: development
  #       WATCHPACK_POLLING: true
  #     ports:
  #       - "3000:3000"
  #     networks:
  #       - app-network

  # nginx:
  #     build:
  #       context: ./frontend
  #       dockerfile: Dockerfile
  #     restart: always
  #     networks:
  #       - app-network
  #     ports:
  #       - "80:80"
  #     depends_on:
  #       - node

  # cloudflared:
  #     image: cloudflare/cloudflared:latest
  #     restart: always
  #     volumes:
  #       - ./cloudflared/config.yml:/etc/cloudflared/config.yml:ro
  #       - ./cloudflared/credentials.json:/etc/cloudflared/credentials.json:ro
  #     command: --no-autoupdate --config /etc/cloudflared/config.yml tunnel run
  #     networks:
  #       - app-network
      # depends_on:
      #   - nginx

networks:
    app-network:
      driver: bridge
    wg-network:
      driver: bridge

volumes:
    mongo_data: