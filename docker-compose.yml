
services:
  # mongo:
  #   image: mongo:latest
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
  #   volumes:
  #     - mongo_data:/data/db
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   ports:
  #     - "27018:27017"  

  # app-wireguard:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   restart: always
  #   environment:
  #     MONGO_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/myapp?authSource=admin
  #     NODE_ENV: development
  #     # WireGuard environment variables
  #     WG_HOST: ${WIREGUARD_SERVERURL:-localhost}
  #     WG_PORT: ${WIREGUARD_SERVERPORT:-51820}
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #     - ./wireguard/wg_confs:/etc/wireguard  # Mount WireGuard configs
  #   depends_on:
  #     - mongo
  #   networks:
  #     - app-network
  #   ports:
  #     - "5000:5000"        # Node.js app
  #     - "51820:51820/udp"  # WireGuard
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_MODULE
  #   sysctls:
  #     - net.ipv4.ip_forward=1
  #     - net.ipv4.conf.all.src_valid_mark=1
  #   privileged: true  # Required for WireGuard
  #   healthcheck:
  #     test: ["CMD", "supervisorctl", "status"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  # cloudflared:
  #     image: cloudflare/cloudflared:latest
  #     restart: always
  #     volumes:
  #       - ./cloudflared/config.yml:/etc/cloudflared/config.yml:ro
  #       - ./cloudflared/credentials.json:/etc/cloudflared/credentials.json:ro
  #     command: --no-autoupdate --config /etc/cloudflared/config.yml tunnel run
  #     networks:
  #       - app-network
      # depends_on:
      #     - nginx
  # react:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     CHOKIDAR_USEPOLLING: true
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - app-network
  # nginx:
  #     build:
  #       context: ./frontend
  #       dockerfile: Dockerfile
  #     restart: always
  #     networks:
  #       - app-network
  #     ports:
  #       - "80:80"
  #     depends_on:
  #       - node
networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
    driver: local